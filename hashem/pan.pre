# 0 "test-print.pml"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "test-print.pml"
# 18 "test-print.pml"
mtype { down, up, none };


chan request = [255] of { byte };

bool floor_request_made[255];


bool floor_door_is_open[255];


byte current_floor;
bool cabin_door_is_open;
chan update_cabin_door = [0] of { bool };
chan cabin_door_updated = [0] of { bool };
chan move = [0] of { bool };
chan floor_reached = [0] of { bool };


chan go = [0] of { byte };
chan served = [0] of { bool };



active proctype cabin_door() {
    printf("Cabin door started\n");
    do
        :: update_cabin_door?true ->
            floor_door_is_open[current_floor] = true;
            cabin_door_is_open = true;
            cabin_door_updated!true;
            printf("Cabin door: Opened\n");
        :: update_cabin_door?false ->
            cabin_door_is_open = false;
            floor_door_is_open[current_floor] = false;
            cabin_door_updated!false;
            printf("Cabin door: Closed\n");
    od;
}


active proctype elevator_engine() {
    printf("Elevator engine started\n");
    do
        :: move?true ->
            printf("Elevator engine: Started moving\n");
            do
                :: move?false ->
                    printf("Elevator engine: Stopped moving\n");
                    break;
                :: floor_reached!true;
                    printf("Elevator engine: Reached floor\n");
            od;
    od;
}


active proctype main_control() {
    byte dest;
    printf("Main control started\n");
    do
        :: go?dest ->
            printf("Main control: Received request to go to floor %d\n", dest);
            move!true;
            printf("Main control: Started moving\n");


            do
                :: floor_reached?true ->
                    if
                        :: current_floor == dest ->
                            printf("Main control: Reached floor %d\n", dest);
                            move!false;
                            update_cabin_door!true;
                            if
                                :: cabin_door_updated?true ->
                                    update_cabin_door!false;
                            fi;
                            if
                                :: cabin_door_updated?false ->
                                    floor_request_made[dest] = false;
                                    served!true;
                                    printf("Main control: Request for floor %d served %d\n", dest, current_floor);
                            fi;
                            break;
                        :: dest > current_floor ->
                            current_floor = current_floor + 1;
                            printf("Main control: Going up to floor %d\n", current_floor);
                        :: dest < current_floor ->
                            current_floor = current_floor - 1;
                            printf("Main control: Going down to floor %d\n", current_floor);
                        :: else ->

                            move!false;
                            break;
                    fi;
            od;
    od;
}





active proctype req_handler() {
    byte dest;
    printf("Request handler started\n");
    do
        :: request?dest ->
            printf("Request handler: Received request for floor %d\n", dest);
            go!dest;
            printf("Request handler: Sent request for floor %d to main control\n", dest);
            served?true;
            printf("Request handler: Request for floor %d served\n", dest);
    od;
}




active [255] proctype req_button() {
    printf("Request button for floor %d started\n", _pid-4);
    do
        :: !floor_request_made[_pid-4] ->
            atomic {
                assert(_pid-4 >= 0 && _pid-4 < 255);
                printf("Request button for floor %d: Requesting elevator\n", _pid-4);
                request!_pid-4;
                floor_request_made[_pid-4] = true;
                printf("Request button for floor %d: Elevator requested\n", _pid-4);
            }
    od;
}
